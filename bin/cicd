#!/usr/bin/env node

const argv = require('minimist')(process.argv.slice(2));
const { Pipeline } = require('..');
const debug = require('debug')('cicd:bin');

function ls (pipeline) {
  console.info('');
  console.info('Stages:');

  if (pipeline.stages.length) {
    pipeline.stages.forEach(stage => {
      console.info(' ', stage.name, stage.options.detach ? '(detach)' : '');
    });
  } else {
    console.info('  (none)');
  }

  console.info('');
}

async function run (pipeline, name) {
  if (name) {
    const stage = pipeline.getStage(name);
    await stage.run(process);
  } else {
    await pipeline.run(process);
  }
}

async function abort (pipeline, name) {
  if (name) {
    const stage = pipeline.getStage(name);
    await stage.abort(process);
  } else {
    await pipeline.abort(process);
  }
}

function help () {
  console.info(`
CI/CD Command Line Interpreter

Usage:
  cicd   <command>

Commands:
  ls                 List all stages
  run    [<stage>]   Run pipeline or stage
  abort  [<stage>]   Abort pipeline or stage
  help               Show help
  `);
}

(async () => {
  process.on('SIGINT', () => {
    console.info('');
    console.info('Gracefully shutting down from SIGINT (Ctrl-C)');
  });

  const workDir = process.cwd();
  const pipeline = new Pipeline({ workDir });

  await pipeline.configure();
  // console.log('pipeline', pipeline)

  try {
    switch (argv._[0]) {
      case 'ls':
        await ls(pipeline);
        break;
      case 'run':
        await run(pipeline, argv._[1]);
        break;
      case 'abort':
        await abort(pipeline, argv._[1]);
        break;
      default:
        await help();
        break;
    }
    console.info('');
    console.info(':)');
    console.info('');
  } catch (err) {
    console.info('');
    console.error(err.message);
    console.error(':(');
    console.info('');
    debug(err);
    process.exit(err.code || -1);
  }
})();

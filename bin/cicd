#!/usr/bin/env node

const path = require('path');
const argv = require('minimist')(process.argv.slice(2));
const { Pipeline, Git } = require('..');
const debug = require('debug')('cicd:bin');
const colors = require('colors');

function ls (pipeline) {
  console.info('');
  console.info(colors.bold('Stages:'));

  if (pipeline.stages.length) {
    pipeline.stages.forEach(stage => {
      console.info(' ', stage.name, stage.options.detach ? '(detach)' : '');
    });
  } else {
    console.info('  (none)');
  }
}

async function init ({ workDir, remoteUrl }) {
  if (remoteUrl.indexOf(':') === -1) {
    remoteUrl = path.resolve(remoteUrl);
  }

  console.info('');
  console.info(`Cloning remote url to ${workDir} ...`);
  const git = new Git({ workDir, remoteUrl });

  await git.clone();
}

async function run (pipeline, name) {
  if (name) {
    const stage = pipeline.getStage(name);
    await stage.run(process);
  } else {
    await pipeline.run(process);
  }
}

async function abort (pipeline, name) {
  if (name) {
    const stage = pipeline.getStage(name);
    await stage.abort(process);
  } else {
    await pipeline.abort(process);
  }
}

function dump (pipeline) {
  const config = pipeline.dump();
  console.info(config);
}

function help () {
  console.info(`
${colors.bold('CI/CD Command Line Interpreter')}

${colors.bold('Usage:')}
  cicd   <command>

${colors.bold('Commands:')}
  init   <remoteUrl>  Initialize new project from git repository remote url
  ls                  List all stages
  run    [<stage>]    Run pipeline or stage
  abort  [<stage>]    Abort pipeline or stage
  dump                Dump pipeline configuration
  help                Show help
  `);
}

(async () => {
  process.on('SIGINT', () => {
    console.info('');
    console.info('Gracefully shutting down from SIGINT (Ctrl-C)');
  });

  try {
    if (argv._[0] === 'init') {
      if (!argv._[1]) {
        throw new Error('Remote url not found!');
      }

      const workDir = path.resolve(argv._[2]) || process.cwd();
      const remoteUrl = argv._[1];

      await init({ workDir, remoteUrl });
    } else if (['ls', 'run', 'abort', 'dump'].indexOf(argv._[0]) === -1) {
      await help();
    } else {
      const workDir = process.cwd();
      const pipeline = new Pipeline({ workDir });

      await pipeline.configure();

      switch (argv._[0]) {
        case 'ls':
          await ls(pipeline);
          break;
        case 'run':
          await run(pipeline, argv._[1]);
          break;
        case 'abort':
          await abort(pipeline, argv._[1]);
          break;
        case 'dump':
          dump(pipeline, argv._[1]);
          process.exit();
      }
    }

    console.info('');
    console.info(colors.green(':)'));
    console.info('');
  } catch (err) {
    console.info('');
    console.error(err.message);
    console.error(colors.red(':('));
    console.info('');
    debug(err);
    process.exit(err.code || -1);
  }
})();
